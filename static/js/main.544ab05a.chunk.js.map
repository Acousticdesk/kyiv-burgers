{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["createPlace","place","rating","label","this","data","App","_ref","changeLanguage","react_default","a","createElement","className","index_es","id","defaultMessage","onChange","e","target","value","name","selected","victory_chart","domainPadding","theme","VictoryTheme","material","containerComponent","victory_container","style","minHeight","victory_axis","dependentAxis","tickFormat","x","concat","substr","victory_bar","labelComponent","victory_tooltip","burgerData","y","Boolean","window","location","hostname","match","addLocaleData","Object","toConsumableArray","ru","uk","messages","defineMessages","en","Website.title","Header.subheading","ApplicationTranslated","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","language","bind","assertThisInitialized","setState","locale","src_App_0","PureComponent","ReactDOM","render","src_ApplicationTranslated","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.544ab05a.chunk.js","sourcesContent":["const createPlace = (place, rating) => ({ place, rating, get label() { return this.place } })\n\nexport default [\n  createPlace('The Burger', 4),\n  createPlace('3B cafe', 5),\n  createPlace('True Burger', 3),\n  createPlace('Burger Farm', 3),\n  createPlace('Trallebus', 2),\n  createPlace('Star Burger', 3),\n]\n","import React from 'react'\nimport {\n  VictoryBar, VictoryChart, VictoryTheme, VictoryContainer, VictoryAxis,\n  VictoryTooltip,\n} from 'victory'\nimport { FormattedMessage } from 'react-intl'\n\nimport './App.css'\n\nimport burgerData from './data'\n\nconst App = ({ changeLanguage }) => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <h1>\n        <FormattedMessage\n          id=\"Website.title\"\n          defaultMessage=\"Kyiv Burgers Rating\"\n        />\n      </h1>\n      <p className=\"small\">\n        <FormattedMessage\n          id=\"Header.subheading\"\n          defaultMessage=\"Rating is formed based on author's humble opinion\"\n        />\n      </p>\n      <select onChange={e => changeLanguage(e.target.value)} name=\"language\" id=\"lang\">\n        <option value=\"ru\">\n          Русский\n        </option>\n        <option value=\"uk\">\n          Українська\n        </option>\n        <option selected value=\"en\">\n          English\n        </option>\n      </select>\n    </header>\n    <main>\n      <div className=\"chart-content\">\n        <VictoryChart\n          domainPadding={20}\n          theme={VictoryTheme.material}\n          containerComponent={<VictoryContainer className=\"burgers-chart\" style={{ minHeight: '480px' }}/>}\n        >\n          <VictoryAxis dependentAxis />\n          <VictoryAxis\n            tickFormat={x => `${x.substr(0, 5)}...`}\n          />\n          <VictoryBar\n            labelComponent={<VictoryTooltip/>}\n            data={burgerData}\n            x=\"place\"\n            y=\"rating\"\n          />\n        </VictoryChart>\n      </div>\n    </main>\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { PureComponent } from 'react'\nimport ReactDOM from 'react-dom'\nimport { IntlProvider, addLocaleData, defineMessages } from 'react-intl'\nimport ru from 'react-intl/locale-data/ru'\nimport uk from 'react-intl/locale-data/uk'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\naddLocaleData([...ru, ...uk])\n\nconst messages = defineMessages({\n  en: {\n    'Website.title': 'Kyiv Burgers Rating',\n    'Header.subheading': 'Rating is formed based on author\\'s humble opinion',\n  },\n  ru: {\n    'Website.title': 'Рейтинг Бургеров в Киеве',\n    'Header.subheading': 'Рейтинг сформирован основываясь на скромном мнении автора',\n  },\n  uk: {\n    'Website.title': 'Рейтинг Бургерів у Києві',\n    'Header.subheading': 'Рейтинг сформировано базуючись на скромній думці автора',\n  },\n})\n\nclass ApplicationTranslated extends PureComponent {\n  state = { language: 'en'}\n\n  constructor() {\n    super()\n    this.changeLanguage = this.changeLanguage.bind(this)\n  }\n\n  changeLanguage(language) {\n    this.setState({ language })\n  }\n\n  render() {\n    const { language } = this.state\n\n    return (\n      <IntlProvider\n        locale={language}\n        messages={messages[language]}\n      >\n        <App changeLanguage={this.changeLanguage} />\n      </IntlProvider>\n    )\n  }\n}\n\nReactDOM.render(<ApplicationTranslated />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}